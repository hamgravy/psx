#!/usr/bin/python
'''
The MIT License (MIT)

Copyright (c) 2015 Elliot Briggs

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
'''
from Crypto.Cipher import AES
import scrypt
import hashlib
import hmac
import ecdsa
import sys
import os
import struct
from mnemonic import Mnemonic

b58_digits = "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz"	
secp256k1_p = 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f
secp256k1_n = 0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141

def longtohex(num):
    hexvalue = hex(num).rstrip("L").lstrip("0x")
    if len(hexvalue) % 2:
        hexvalue = '0' + hexvalue
    return hexvalue

def b58ce(s):
    checksum = hashlib.sha256(hashlib.sha256(s).digest()).digest()[:4]
    b58checkencoded = b58e(s+checksum)
    return b58checkencoded

def b58cd(s):
    k=b58d(s)
    calcheck = k[0:-4]
    check0 = k[-4:]
    check1 = hashlib.sha256(hashlib.sha256(calcheck).digest()).digest()[:4]
    if check0 != check1:
        print "error: base58 checkencode checksum FAIL"
    return calcheck

def b58e(b):
    n = int('0x0' + b.encode('hex'), 16)
    # Divide integer into base58
    res=""
    while n > 0:
        n, r = divmod(n, 58)
        res=b58_digits[r] + res
    # Encode leading zeros as base58 zeros
    pad = 0
    for c in b:
        if c == b'\x00':
            pad += 1
        else: break
    return b58_digits[0] * pad + res

def b58d(s):
    n = 0
    for c in s:
        n *= 58
        if c not in b58_digits:
            print 'Character %r is not a valid base58 character' % c
        digit = b58_digits.index(c)
        n += digit
    # Convert the integer to bytes
    h = '%x' % n
    if len(h) % 2:
        h = '0' + h
    res = h.decode('hex')
    # Add padding back.
    pad = 0
    for c in s[:-1]:
        if c == b58_digits[0]: pad += 1
        else: break
    return b'\x00' * pad + res

def sha256(b):
	return hashlib.sha256(b).digest()

def ecpoint(secret):
    sk = ecdsa.SigningKey.from_string(secret, curve=ecdsa.SECP256k1)
    rawpoint = sk.verifying_key.to_string().encode('hex')
    ypoint = rawpoint[63:128]
    if int(ypoint,16) & 1:
        comp = (b'\x03').encode('hex') + rawpoint[:64]
    else:
        comp = (b'\x02').encode('hex') + rawpoint[:64]
    return comp

def fingerprint(secret):
    pub = pubkey(wifencode(secret))
    addr = pubtoaddr(pub)
    fp = b58cd(addr)[1:5]
    return fp

def pubkey(b):
    decoded = b58cd(b)
    key = decoded[1:-1]
    return ecpoint(key)

def pubtoaddr(pubkey):
    address = ripemd160(sha256(pubkey.decode('hex')))
    address = b58ce(b'\x00' + address)
    return address

def ripemd160(data):
    ripemd160hash = hashlib.new('ripemd160')
    ripemd160hash.update(data)
    return ripemd160hash.digest()

def wifencode(b):
    return b58ce(b'\x80' + b + b'\x01')

def wifdecode(b):
    wifhex = b58cd(b)
    return wifhex[1:33]

def bip38e(wifkey,passphrase):
    flagbyte = '\xe0' # always compressed
    privkey = wifdecode(wifkey) 
    hexpub = pubkey(wifkey)
    addr = pubtoaddr(hexpub)
    addresshash = hashlib.sha256(hashlib.sha256(addr).digest()).digest()[0:4]
    key = scrypt.hash(passphrase, addresshash, 16384, 8, 8)
    derivedhalf1 = key[0:32]
    derivedhalf2 = key[32:64]
    aes = AES.new(derivedhalf2)
    xor1=int(privkey[0:16].encode('hex'),16) ^ int(derivedhalf1[0:16].encode('hex'),16)
    xor2=int(privkey[16:32].encode('hex'),16) ^ int(derivedhalf1[16:32].encode('hex'),16)
    encryptedhalf1 = aes.encrypt(longtohex(xor1).decode('hex'))
    encryptedhalf2 = aes.encrypt(longtohex(xor2).decode('hex'))
    encrypted_privkey = ('\x01\x42' + flagbyte + addresshash + encryptedhalf1 + encryptedhalf2)
    return b58ce(encrypted_privkey)

def bip38d(bip38key,passphrase):
    d = b58d(bip38key)
    d = d[2:] # trim the first two bytes, always assume non-ec-multiplied
    flagbyte = d[0:1]
    d = d[1:] # trim flagbyte
    if flagbyte == '\xc0':
        print "uncompressed keys not supported...doh!"
        return 0
    elif flagbyte == '\xe0':
        compressed = True
    addresshash = d[0:4]
    d = d[4:-4]
    key = scrypt.hash(passphrase, addresshash, 16384, 8, 8)
    derivedhalf1 = key[0:32]
    derivedhalf2 = key[32:64]
    encryptedhalf1 = d[0:16]
    encryptedhalf2 = d[16:32]
    aes = AES.new(derivedhalf2)
    decryptedhalf2 = aes.decrypt(encryptedhalf2)
    decryptedhalf1 = aes.decrypt(encryptedhalf1)
    priv = decryptedhalf1 + decryptedhalf2
    xor1 = int(priv.encode('hex'), 16) ^ int(derivedhalf1.encode('hex'), 16)
    priv = longtohex(xor1).decode('hex')
    wif = wifencode(priv)
    pub = pubkey(wif)
    addr = pubtoaddr(pub)
    if sha256(sha256(addr))[0:4] != addresshash:
        print('address hash mismatch! the attempted password is incorrect')
        return 0
    return wif

def bip32root(seed):
    if seed[:4] == "xprv":
        return seed # an extended key was already given, no need to generate the root key!
    seed=seed.decode('hex')
    hmackey="Bitcoin seed"
    data=seed
    rawkey = hmac.HMAC(hmackey, data, hashlib.sha512).digest()
    mastersecret = rawkey[:32]
    chaincode = rawkey[32:]
    prefix=b'\x04\x88\xAD\xE4' # xprv
    masternode = b'\x00'
    parentfingerprint = b'\x00\x00\x00\x00'
    childnumber = b'\x00\x00\x00\x00'    
    serialized = prefix + masternode + parentfingerprint + childnumber + chaincode + b'\x00' + mastersecret
    return b58ce(serialized)

def bip32CKDpriv(x,n,masternode):
    if x[:4] == "xprv":
        extendedkey = b58cd(x)
        prefix=extendedkey[:4]
    else:
        return "input must be in the bip32 extended private key format"

    if int(extendedkey[4].encode('hex')) >= masternode:
        return x # passthrough, this key is upstream, skip to next masternode until something downstream comes

    chaincode=extendedkey[13:45]
    mastersecret=extendedkey[46:]
    
    # check for hardended key index n 
    if n >= (2 ** 31):
        data=b'\x00' + mastersecret
    else:
        data=ecpoint(mastersecret).decode('hex')

    data = data + struct.pack(">I",n)
    hmackey=chaincode
    rawkey = hmac.HMAC(hmackey, data, hashlib.sha512).digest()
    childkey = (int(rawkey[:32].encode('hex'),16) + int(mastersecret.encode('hex'),16)) % secp256k1_n
    childkey = longtohex(childkey).decode('hex')
    childchaincode = rawkey[32:]
    masternode = chr(masternode) # this is the horizontal tree depth in the bip32 spec diagram
    parentfingerprint = fingerprint(mastersecret)
    childnumber = struct.pack(">I",n)
    
    serialized = prefix + masternode + parentfingerprint + childnumber + childchaincode + b'\x00' + childkey
    return b58ce(serialized)

#-------------------------------------------------------------

if sys.argv[1] == "sha256":
    argin=sys.stdin.readline().strip()
    hashoutput= sha256(argin).encode('hex')
    print hashoutput
elif sys.argv[1] == "newkey":
    key = os.urandom(32)
    print wifencode(key)
elif sys.argv[1] == "addr": 
    argin=sys.stdin.readline().strip()
    pubkey = pubkey(argin)
    address = pubtoaddr(pubkey)
    print address
elif sys.argv[1] == "pub2addr": 
    argin=sys.stdin.readline().strip()
    address = pubtoaddr(argin)
    print address
elif sys.argv[1] == "pubkey": 
    argin=sys.stdin.readline().strip()
    pubkey = pubkey(argin)
    print pubkey
elif sys.argv[1] == "brainwallet":
    argin=sys.stdin.readline().strip()
    key=sha256(argin)
    print wifencode(key)
elif sys.argv[1] == "mnemonic":
    argin=sys.stdin.readline().strip()
    mnemo = Mnemonic('english')
    codedir = sys.argv[2]
    if len(sys.argv) == 4:
        encodepass = sys.argv[3]
    else:
        encodepass = ""
    if codedir == "decode":
        print Mnemonic.to_seed(argin,passphrase=encodepass).encode('hex')
    elif codedir == "encode":
        print Mnemonic.to_mnemonic(mnemo,argin.decode('hex'))
elif sys.argv[1] == "bip38enc":
    argin = sys.stdin.readline().strip()
    passphrase = sys.argv[2]
    bip38key = bip38e(argin,passphrase)
    print bip38key
elif sys.argv[1] == "bip38dec":
    argin = sys.stdin.readline().strip()
    passphrase = sys.argv[2]
    wifkey = bip38d(argin,passphrase)
    if wifkey != 0:
        print wifkey  	
elif sys.argv[1] == "bip32":
    argin = sys.stdin.readline().strip()
    derivpath = sys.argv[2].split('/')
    depth = 0
    for x in derivpath:
        if x == "m" :
            bip32privkey = bip32root(argin)
        elif x != "":
            # check for hardened key paths
            if "h" in x:
                x = x.rstrip("h")
                x = int(x) + (2**31)
            elif "H" in x:
                x = x.rstrip("H")
                x = int(x) + (2**31)
            elif "\'" in x:
                x = x.rstrip("\'")
                x = int(x) + (2**31)
            bip32privkey = bip32CKDpriv(bip32privkey,int(x),depth)
        depth = depth+1 
    print bip32privkey
    
else:	
    print "invalid input"	

#TODO: finish bip32 features: pubkey derivation, privkey/address combo output


